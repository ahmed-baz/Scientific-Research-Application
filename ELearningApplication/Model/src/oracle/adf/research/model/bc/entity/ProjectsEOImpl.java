package oracle.adf.research.model.bc.entity;

import oracle.adf.research.model.bc.classes.User;
import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 20 22:31:24 EET 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProjectsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ProjectId,
        ProjectName,
        Description,
        Link,
        CategoryId,
        ProjectFile,
        UserId,
        ProjectDate,
        ProjectImage,
        Screenshot1,
        Screenshot2,
        Path,
        Code,
        Type,
        Category1,
        Users;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PROJECTID = AttributesEnum.ProjectId.index();
    public static final int PROJECTNAME = AttributesEnum.ProjectName.index();
    public static final int DESCRIPTION = AttributesEnum.Description.index();
    public static final int LINK = AttributesEnum.Link.index();
    public static final int CATEGORYID = AttributesEnum.CategoryId.index();
    public static final int PROJECTFILE = AttributesEnum.ProjectFile.index();
    public static final int USERID = AttributesEnum.UserId.index();
    public static final int PROJECTDATE = AttributesEnum.ProjectDate.index();
    public static final int PROJECTIMAGE = AttributesEnum.ProjectImage.index();
    public static final int SCREENSHOT1 = AttributesEnum.Screenshot1.index();
    public static final int SCREENSHOT2 = AttributesEnum.Screenshot2.index();
    public static final int PATH = AttributesEnum.Path.index();
    public static final int CODE = AttributesEnum.Code.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int CATEGORY1 = AttributesEnum.Category1.index();
    public static final int USERS = AttributesEnum.Users.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProjectsEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.adf.research.model.bc.entity.ProjectsEO");
    }


    /**
     * Gets the attribute value for ProjectId, using the alias name ProjectId.
     * @return the value of ProjectId
     */
    public Number getProjectId() {
        return (Number) getAttributeInternal(PROJECTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProjectId.
     * @param value value to set the ProjectId
     */
    public void setProjectId(Number value) {
        setAttributeInternal(PROJECTID, value);
    }

    /**
     * Gets the attribute value for ProjectName, using the alias name ProjectName.
     * @return the value of ProjectName
     */
    public String getProjectName() {
        return (String) getAttributeInternal(PROJECTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProjectName.
     * @param value value to set the ProjectName
     */
    public void setProjectName(String value) {
        setAttributeInternal(PROJECTNAME, value);
    }

    /**
     * Gets the attribute value for Description, using the alias name Description.
     * @return the value of Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for Description.
     * @param value value to set the Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for Link, using the alias name Link.
     * @return the value of Link
     */
    public String getLink() {
        return (String) getAttributeInternal(LINK);
    }

    /**
     * Sets <code>value</code> as the attribute value for Link.
     * @param value value to set the Link
     */
    public void setLink(String value) {
        setAttributeInternal(LINK, value);
    }

    /**
     * Gets the attribute value for CategoryId, using the alias name CategoryId.
     * @return the value of CategoryId
     */
    public Number getCategoryId() {
        return (Number) getAttributeInternal(CATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CategoryId.
     * @param value value to set the CategoryId
     */
    public void setCategoryId(Number value) {
        setAttributeInternal(CATEGORYID, value);
    }

    /**
     * Gets the attribute value for ProjectFile, using the alias name ProjectFile.
     * @return the value of ProjectFile
     */
    public BlobDomain getProjectFile() {
        return (BlobDomain) getAttributeInternal(PROJECTFILE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProjectFile.
     * @param value value to set the ProjectFile
     */
    public void setProjectFile(BlobDomain value) {
        setAttributeInternal(PROJECTFILE, value);
    }

    /**
     * Gets the attribute value for UserId, using the alias name UserId.
     * @return the value of UserId
     */
    public Number getUserId() {
        return (Number) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserId.
     * @param value value to set the UserId
     */
    public void setUserId(Number value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * Gets the attribute value for ProjectDate, using the alias name ProjectDate.
     * @return the value of ProjectDate
     */
    public Date getProjectDate() {
        return (Date) getAttributeInternal(PROJECTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProjectDate.
     * @param value value to set the ProjectDate
     */
    public void setProjectDate(Date value) {
        setAttributeInternal(PROJECTDATE, value);
    }

    /**
     * Gets the attribute value for ProjectImage, using the alias name ProjectImage.
     * @return the value of ProjectImage
     */
    public BlobDomain getProjectImage() {
        return (BlobDomain) getAttributeInternal(PROJECTIMAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProjectImage.
     * @param value value to set the ProjectImage
     */
    public void setProjectImage(BlobDomain value) {
        setAttributeInternal(PROJECTIMAGE, value);
    }

    /**
     * Gets the attribute value for Screenshot1, using the alias name Screenshot1.
     * @return the value of Screenshot1
     */
    public BlobDomain getScreenshot1() {
        return (BlobDomain) getAttributeInternal(SCREENSHOT1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Screenshot1.
     * @param value value to set the Screenshot1
     */
    public void setScreenshot1(BlobDomain value) {
        setAttributeInternal(SCREENSHOT1, value);
    }

    /**
     * Gets the attribute value for Screenshot2, using the alias name Screenshot2.
     * @return the value of Screenshot2
     */
    public BlobDomain getScreenshot2() {
        return (BlobDomain) getAttributeInternal(SCREENSHOT2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Screenshot2.
     * @param value value to set the Screenshot2
     */
    public void setScreenshot2(BlobDomain value) {
        setAttributeInternal(SCREENSHOT2, value);
    }

    /**
     * Gets the attribute value for Path, using the alias name Path.
     * @return the value of Path
     */
    public String getPath() {
        return (String) getAttributeInternal(PATH);
    }

    /**
     * Sets <code>value</code> as the attribute value for Path.
     * @param value value to set the Path
     */
    public void setPath(String value) {
        setAttributeInternal(PATH, value);
    }

    /**
     * Gets the attribute value for Code, using the alias name Code.
     * @return the value of Code
     */
    public String getCode() {
        return (String) getAttributeInternal(CODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Code.
     * @param value value to set the Code
     */
    public void setCode(String value) {
        setAttributeInternal(CODE, value);
    }

    /**
     * Gets the attribute value for Type, using the alias name Type.
     * @return the value of Type
     */
    public String getType() {
        return (String) getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Type.
     * @param value value to set the Type
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getCategory1() {
        return (EntityImpl) getAttributeInternal(CATEGORY1);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCategory1(EntityImpl value) {
        setAttributeInternal(CATEGORY1, value);
    }

    /**
     * @return the associated entity UsersEOImpl.
     */
    public UsersEOImpl getUsers() {
        return (UsersEOImpl) getAttributeInternal(USERS);
    }

    /**
     * Sets <code>value</code> as the associated entity UsersEOImpl.
     */
    public void setUsers(UsersEOImpl value) {
        setAttributeInternal(USERS, value);
    }


    /**
     * @param projectId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number projectId) {
        return new Key(new Object[] { projectId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("PROJECTS_SEQ",this.getDBTransaction());
        Number n = seq.getSequenceNumber();
        this.setProjectId(n);
        User user = (User) ADFContext.getCurrent().getSessionScope().get("USERS");
        this.setUserId(user.getUserId());
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}


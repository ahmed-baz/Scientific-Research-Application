package oracle.adf.research.model.bc.module;

import java.util.Random;

import oracle.adf.research.model.bc.module.common.CoursesAM;

import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 27 00:44:00 EET 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CoursesAMImpl extends ApplicationModuleImpl implements CoursesAM {
    /**
     * This is the default constructor (do not remove).
     */
    public CoursesAMImpl() {
    }

    /**
     * Container's getter for Courses.
     * @return Courses
     */
    public ViewObjectImpl getCourses() {
        return (ViewObjectImpl) findViewObject("Courses");
    }

    /**
     * Container's getter for Videos.
     * @return Videos
     */
    public ViewObjectImpl getVideos() {
        return (ViewObjectImpl) findViewObject("Videos");
    }

    /**
     * Container's getter for Category.
     * @return Category
     */
    public ViewObjectImpl getCategory() {
        return (ViewObjectImpl) findViewObject("Category");
    }

    /**
     * Container's getter for PublicCourses.
     * @return PublicCourses
     */
    public ViewObjectImpl getPublicCourses() {
        return (ViewObjectImpl) findViewObject("PublicCourses");
    }

    /**
     * Container's getter for PublicVideos.
     * @return PublicVideos
     */
    public ViewObjectImpl getPublicVideos() {
        return (ViewObjectImpl) findViewObject("PublicVideos");
    }

    /**
     * Container's getter for PrivateCourses.
     * @return PrivateCourses
     */
    public ViewObjectImpl getPrivateCourses() {
        return (ViewObjectImpl) findViewObject("PrivateCourses");
    }

    /**
     * Container's getter for PrivateVideos.
     * @return PrivateVideos
     */
    public ViewObjectImpl getPrivateVideos() {
        return (ViewObjectImpl) findViewObject("PrivateVideos");
    }

    /**
     * Container's getter for CategoryDropDownList.
     * @return CategoryDropDownList
     */
    public ViewObjectImpl getCategoryDropDownList() {
        return (ViewObjectImpl) findViewObject("CategoryDropDownList");
    }

    /**
     * Container's getter for CourseVideosVuLink1.
     * @return CourseVideosVuLink1
     */
    public ViewLinkImpl getCourseVideosVuLink1() {
        return (ViewLinkImpl) findViewLink("CourseVideosVuLink1");
    }

    /**
     * Container's getter for CategoryCourseVuLink1.
     * @return CategoryCourseVuLink1
     */
    public ViewLinkImpl getCategoryCourseVuLink1() {
        return (ViewLinkImpl) findViewLink("CategoryCourseVuLink1");
    }

    /**
     * Container's getter for CourseVideosVuLink2.
     * @return CourseVideosVuLink2
     */
    public ViewLinkImpl getCourseVideosVuLink2() {
        return (ViewLinkImpl) findViewLink("CourseVideosVuLink2");
    }

    /**
     * Container's getter for CourseVideosVuLink3.
     * @return CourseVideosVuLink3
     */
    public ViewLinkImpl getCourseVideosVuLink3() {
        return (ViewLinkImpl) findViewLink("CourseVideosVuLink3");
    }

    public String courseCode() {
        boolean isFound = true;
        String uniqueCode = null;
        String code = getRandomCode();
        ViewObject courseVO = this.getPrivateCourses();
        ViewCriteria courseVC = courseVO.createViewCriteria();
        ViewCriteriaRow courseVCR = courseVC.createViewCriteriaRow();
        while (isFound == true) {
            code = getRandomCode();
            courseVCR.setAttribute("Code", code);
            courseVCR.setAttribute("Type", "Private");
            courseVC.insertRow(courseVCR);
            courseVO.applyViewCriteria(courseVC);
            courseVO.executeQuery();
            System.out.println("Query Executed");
            if (courseVO.getRowCount() == 0) {
                System.out.println("Not Found");
                isFound = false;
                uniqueCode = code;
            } else {
                System.out.println(" Found in if statment");
            }
        }
        System.out.println("Uniqu Code is : " + uniqueCode);
        return uniqueCode;
    }

    public String getRandomCode() {
        Random rnd = new Random();
        String allCode = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder code = new StringBuilder();
        while (code.length() < 6) { // length of the random string.
            int index = (int) (rnd.nextFloat() * allCode.length());
            code.append(allCode.charAt(index));
        }
        String codeStr = code.toString();
        return codeStr;
    }

    public Boolean checkCourseCode(String code) {
        boolean isFound = false;
        if (code.length() == 6) {
            ViewObject courseVO = this.getPrivateCourses();
            ViewCriteria courseVC = courseVO.createViewCriteria();
            ViewCriteriaRow courseVCR = courseVC.createViewCriteriaRow();
            courseVCR.setAttribute("Code", code);
            courseVCR.setAttribute("Type", "Private");
            courseVC.insertRow(courseVCR);
            courseVO.applyViewCriteria(courseVC);
            courseVO.executeQuery();
            System.out.println("Query Executed");
            System.out.println("Rows : " + courseVO.getRowCount());
            if (courseVO.getRowCount() > 0) {
                System.out.println("Found");
                isFound = true;
            } else {
                System.out.println("Not Found");
            }
        }
        return isFound;
    }

    public void defaultCoursess() {
        ViewObjectImpl publicCourseVO = getPublicCourses();
        ViewCriteria publicCourseVC = publicCourseVO.getViewCriteria("PublicCoursesVOCriteria");
        publicCourseVO.applyViewCriteria(publicCourseVC);
        publicCourseVO.executeQuery();

        ViewObjectImpl privateCourseVO = getPrivateCourses();
        ViewCriteria privateCourseVC = privateCourseVO.getViewCriteria("PrivateCoursesVOCriteria");
        privateCourseVO.applyViewCriteria(privateCourseVC);
        privateCourseVO.executeQuery();
    }
}


package oracle.adf.research.model.bc.entity;

import oracle.adf.research.model.bc.classes.User;
import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Apr 14 23:16:08 EET 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProfessorsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ProfessorId,
        UserId,
        NationalId,
        Active,
        StatusId,
        CityId,
        CvId,
        CountryId,
        ContactData,
        Users,
        Awards,
        Qualifications,
        Cv,
        Qualifications1,
        Awards1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int PROFESSORID = AttributesEnum.ProfessorId.index();
    public static final int USERID = AttributesEnum.UserId.index();
    public static final int NATIONALID = AttributesEnum.NationalId.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int STATUSID = AttributesEnum.StatusId.index();
    public static final int CITYID = AttributesEnum.CityId.index();
    public static final int CVID = AttributesEnum.CvId.index();
    public static final int COUNTRYID = AttributesEnum.CountryId.index();
    public static final int CONTACTDATA = AttributesEnum.ContactData.index();
    public static final int USERS = AttributesEnum.Users.index();
    public static final int AWARDS = AttributesEnum.Awards.index();
    public static final int QUALIFICATIONS = AttributesEnum.Qualifications.index();
    public static final int CV = AttributesEnum.Cv.index();
    public static final int QUALIFICATIONS1 = AttributesEnum.Qualifications1.index();
    public static final int AWARDS1 = AttributesEnum.Awards1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProfessorsEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.adf.research.model.bc.entity.ProfessorsEO");
    }


    /**
     * Gets the attribute value for ProfessorId, using the alias name ProfessorId.
     * @return the value of ProfessorId
     */
    public Number getProfessorId() {
        return (Number) getAttributeInternal(PROFESSORID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProfessorId.
     * @param value value to set the ProfessorId
     */
    public void setProfessorId(Number value) {
        setAttributeInternal(PROFESSORID, value);
    }

    /**
     * Gets the attribute value for UserId, using the alias name UserId.
     * @return the value of UserId
     */
    public Number getUserId() {
        return (Number) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserId.
     * @param value value to set the UserId
     */
    public void setUserId(Number value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * Gets the attribute value for NationalId, using the alias name NationalId.
     * @return the value of NationalId
     */
    public Number getNationalId() {
        return (Number) getAttributeInternal(NATIONALID);
    }

    /**
     * Sets <code>value</code> as the attribute value for NationalId.
     * @param value value to set the NationalId
     */
    public void setNationalId(Number value) {
        setAttributeInternal(NATIONALID, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the value of Active
     */
    public String getActive() {
        return (String) getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(String value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for StatusId, using the alias name StatusId.
     * @return the value of StatusId
     */
    public Number getStatusId() {
        return (Number) getAttributeInternal(STATUSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for StatusId.
     * @param value value to set the StatusId
     */
    public void setStatusId(Number value) {
        setAttributeInternal(STATUSID, value);
    }

    /**
     * Gets the attribute value for CityId, using the alias name CityId.
     * @return the value of CityId
     */
    public Number getCityId() {
        return (Number) getAttributeInternal(CITYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CityId.
     * @param value value to set the CityId
     */
    public void setCityId(Number value) {
        setAttributeInternal(CITYID, value);
    }

    /**
     * Gets the attribute value for CvId, using the alias name CvId.
     * @return the value of CvId
     */
    public Number getCvId() {
        return (Number) getAttributeInternal(CVID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CvId.
     * @param value value to set the CvId
     */
    public void setCvId(Number value) {
        setAttributeInternal(CVID, value);
    }

    /**
     * Gets the attribute value for CountryId, using the alias name CountryId.
     * @return the value of CountryId
     */
    public Number getCountryId() {
        return (Number) getAttributeInternal(COUNTRYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CountryId.
     * @param value value to set the CountryId
     */
    public void setCountryId(Number value) {
        setAttributeInternal(COUNTRYID, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getContactData() {
        return (RowIterator) getAttributeInternal(CONTACTDATA);
    }

    /**
     * @return the associated entity UsersEOImpl.
     */
    public UsersEOImpl getUsers() {
        return (UsersEOImpl) getAttributeInternal(USERS);
    }

    /**
     * Sets <code>value</code> as the associated entity UsersEOImpl.
     */
    public void setUsers(UsersEOImpl value) {
        setAttributeInternal(USERS, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAwards() {
        return (RowIterator) getAttributeInternal(AWARDS);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getQualifications() {
        return (RowIterator) getAttributeInternal(QUALIFICATIONS);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getCv() {
        return (EntityImpl) getAttributeInternal(CV);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCv(EntityImpl value) {
        setAttributeInternal(CV, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getQualifications1() {
        return (RowIterator) getAttributeInternal(QUALIFICATIONS1);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAwards1() {
        return (RowIterator) getAttributeInternal(AWARDS1);
    }


    /**
     * @param professorId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number professorId) {
        return new Key(new Object[] { professorId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("PROFESSORS_SEQ",this.getDBTransaction());
        Number n = seq.getSequenceNumber();
        this.setProfessorId(n);
        this.setActive("N");
        User user = (User) ADFContext.getCurrent().getSessionScope().get("USERS");
        this.setUserId(user.getUserId());
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}


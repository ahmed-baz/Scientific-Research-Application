package oracle.adf.research.model.bc.module;

import java.awt.Image;

import java.io.IOException;

import java.text.DateFormat;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import oracle.adf.research.model.bc.module.common.SecurityAM;
import oracle.adf.share.ADFContext;
import oracle.adf.research.model.bc.classes.User;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Mar 11 22:30:22 EET 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SecurityAMImpl extends ApplicationModuleImpl implements SecurityAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SecurityAMImpl() {
    }

    /**
     * Container's getter for Roles1.
     * @return Roles1
     */
    public ViewObjectImpl getRoles1() {
        return (ViewObjectImpl) findViewObject("Roles1");
    }

    /**
     * Container's getter for Users1.
     * @return Users1
     */
    public ViewObjectImpl getUsers1() {
        return (ViewObjectImpl) findViewObject("Users1");
    }

    public String encrypt(String value, int type) throws IOException {
        // type = 1 for encryption , 2 for decryption
        String result = null;
        if (type == 1) {
            result = new sun.misc.BASE64Encoder().encode(value.getBytes());
        } else {
            byte[] decode = new sun.misc.BASE64Decoder().decodeBuffer(value);
            result = new String(decode);
        }
        return result;
    }

    public boolean checkLogin(String email, String password) {
        System.out.println("check Login AM Method");
        boolean userFound = false;
        ADFContext.getCurrent().getSessionScope().put("USERS", null);
        if (!email.isEmpty() && !password.isEmpty()) {
            String passwordEncoded = null;
            try {
                passwordEncoded = encrypt(password, 1);
            } catch (IOException e) {

                throw new JboException("Issue in encoding");
            }
            ViewObject usersVO = this.getUsers1().getViewObject();
            /// we need to check for user / pass using View Criteria
            ViewCriteria usersVC = usersVO.createViewCriteria();
            ViewCriteriaRow ADFUsersVCR = usersVC.createViewCriteriaRow();
            ADFUsersVCR.setAttribute("Email", email);
            ADFUsersVCR.setAttribute("Password", passwordEncoded);
            usersVC.insertRow(ADFUsersVCR);
            usersVO.applyViewCriteria(usersVC);
            usersVO.executeQuery();
            if (usersVO.getRowCount() > 0) {
                // User Found ok
                userFound = true;
                // Retrieve Needed Data to be put on Session Scope
                Row usersRow = usersVO.next();
                Number userId = (Number) usersRow.getAttribute("UserId");
                String userFirstName = (String) usersRow.getAttribute("FirstName");
                String userLastName = (String) usersRow.getAttribute("LastName");
                Number roleId = (Number) usersRow.getAttribute("RoleId");
                String active = (String) usersRow.getAttribute("Active");
                ViewObject rolesVO = this.getRoles1();
                rolesVO.setNamedWhereClauseParam("pRoleId", roleId);
                rolesVO.executeQuery();
                Row rolesRow = rolesVO.createRowSetIterator(null).next();
                String roleName = (String) rolesRow.getAttribute("RoleName");
                System.out.println("User Id : " + userId);
                // put needed data on Session Scope
                User user = new User(userId, userFirstName, userLastName, email, active, roleName);
                ADFContext.getCurrent().getSessionScope().put("USERS", user);
            } else {
                userFound = false;
                // user not found
            }
        } else {
            /// user or pass fields are empty
            throw new JboException("User Name or password should be entered");
        }
        return userFound;
    }


    public String activeEmail(String email, String code) {
        ViewObject usersVO = this.getUsers1().getViewObject();

        ViewCriteria usersVC = usersVO.createViewCriteria();
        ViewCriteriaRow ADFUsersVCR = usersVC.createViewCriteriaRow();

        ADFUsersVCR.setAttribute("Email", email);
        ADFUsersVCR.setAttribute("Code", code);
        usersVC.insertRow(ADFUsersVCR);
        usersVO.applyViewCriteria(usersVC);
        usersVO.executeQuery();
        if (usersVO.getRowCount() > 0) {
            Row usersRow = usersVO.next();
            usersRow.setAttribute("Active", "Y");
            this.getDBTransaction().commit();
            return "Y";
        } else {
            //throw new JboException("Make sure that you entered the correct code !!");
            return "N";
        }
    }

    public void register(String firstName, String lastName, String email, String password, String code, String date,
                         String gender, BlobDomain image) {
        ViewObject userVO = this.getUsers1();
        Row newUser = userVO.createRow();
        newUser.setAttribute("FirstName", firstName);
        newUser.setAttribute("LastName", lastName);
        newUser.setAttribute("Email", email);
        newUser.setAttribute("Password", password);
        newUser.setAttribute("BirthDate", castToJBODate(date));
        newUser.setAttribute("Active", "N");
        newUser.setAttribute("RoleId", 3);
        newUser.setAttribute("Image", image);
        newUser.setAttribute("Gender", gender);
        newUser.setAttribute("Code", code);
        userVO.insertRow(newUser);
        //this.getDBTransaction().commit();
    }

    public oracle.jbo.domain.Date castToJBODate(String aDate) {
        DateFormat formatter;
        java.util.Date date;

        if (aDate != null) {

            try {

                formatter = new SimpleDateFormat("dd/MM/yyyy");
                date = formatter.parse(aDate);
                java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                oracle.jbo.domain.Date jboDate = new oracle.jbo.domain.Date(sqlDate);

                return jboDate;
            } catch (ParseException e) {

                e.printStackTrace();
            }

        }

        return null;
    }

    public static void main(String[] args) throws IOException {
        SecurityAMImpl am = new SecurityAMImpl();
        System.out.println(am.encrypt("aya123", 1));
    }

    /**
     * Container's getter for Professors1.
     * @return Professors1
     */
    public ViewObjectImpl getProfessors1() {
        return (ViewObjectImpl) findViewObject("Professors1");
    }

    /**
     * Container's getter for UserProfVuLink1.
     * @return UserProfVuLink1
     */
    public ViewLinkImpl getUserProfVuLink1() {
        return (ViewLinkImpl) findViewLink("UserProfVuLink1");
    }


    /**
     * Container's getter for ContactData1.
     * @return ContactData1
     */
    public ViewObjectImpl getContactData1() {
        return (ViewObjectImpl) findViewObject("ContactData1");
    }

    /**
     * Container's getter for ProfContactDataVuLink1.
     * @return ProfContactDataVuLink1
     */
    public ViewLinkImpl getProfContactDataVuLink1() {
        return (ViewLinkImpl) findViewLink("ProfContactDataVuLink1");
    }

    /**
     * Container's getter for Cv1.
     * @return Cv1
     */
    public ViewObjectImpl getCv1() {
        return (ViewObjectImpl) findViewObject("Cv1");
    }

    /**
     * Container's getter for ProfCVVuLink1.
     * @return ProfCVVuLink1
     */
    public ViewLinkImpl getProfCVVuLink1() {
        return (ViewLinkImpl) findViewLink("ProfCVVuLink1");
    }


    public boolean checkEmail(String email) {
        System.out.println("check Email AM Method");
        boolean userFound = false;
        ViewObject usersVO = this.getUsers1().getViewObject();
        /// we need to check for user / pass using View Criteria
        ViewCriteria usersVC = usersVO.createViewCriteria();
        ViewCriteriaRow ADFUsersVCR = usersVC.createViewCriteriaRow();
        ADFUsersVCR.setAttribute("Email", email);
        usersVC.insertRow(ADFUsersVCR);
        usersVO.applyViewCriteria(usersVC);
        usersVO.executeQuery();
        if (usersVO.getRowCount() > 0) {
            // User Found ok
            userFound = true;
        }
        return userFound;
    }


    /**
     * Container's getter for Awards1.
     * @return Awards1
     */
    public ViewObjectImpl getAwards1() {
        return (ViewObjectImpl) findViewObject("Awards1");
    }

    /**
     * Container's getter for ProfessrorAwardVuLink1.
     * @return ProfessrorAwardVuLink1
     */
    public ViewLinkImpl getProfessrorAwardVuLink1() {
        return (ViewLinkImpl) findViewLink("ProfessrorAwardVuLink1");
    }

    /**
     * Container's getter for Qualifiactions1.
     * @return Qualifiactions1
     */
    public ViewObjectImpl getQualifiactions1() {
        return (ViewObjectImpl) findViewObject("Qualifiactions1");
    }

    /**
     * Container's getter for PeofessorQualVuLink1.
     * @return PeofessorQualVuLink1
     */
    public ViewLinkImpl getPeofessorQualVuLink1() {
        return (ViewLinkImpl) findViewLink("PeofessorQualVuLink1");
    }

    /**
     * Container's getter for Projects1.
     * @return Projects1
     */
    public ViewObjectImpl getProjects1() {
        return (ViewObjectImpl) findViewObject("Projects1");
    }

    /**
     * Container's getter for UserProjectsVuLink1.
     * @return UserProjectsVuLink1
     */
    public ViewLinkImpl getUserProjectsVuLink1() {
        return (ViewLinkImpl) findViewLink("UserProjectsVuLink1");
    }
}


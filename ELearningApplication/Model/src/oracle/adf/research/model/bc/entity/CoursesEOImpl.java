package oracle.adf.research.model.bc.entity;

import oracle.adf.research.model.bc.classes.User;
import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 27 00:35:42 EET 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CoursesEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CourseId,
        CourseName,
        ProfessorName,
        UserId,
        CourseDate,
        CategoryId,
        Type,
        Code,
        Videos,
        Category;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int COURSEID = AttributesEnum.CourseId.index();
    public static final int COURSENAME = AttributesEnum.CourseName.index();
    public static final int PROFESSORNAME = AttributesEnum.ProfessorName.index();
    public static final int USERID = AttributesEnum.UserId.index();
    public static final int COURSEDATE = AttributesEnum.CourseDate.index();
    public static final int CATEGORYID = AttributesEnum.CategoryId.index();
    public static final int TYPE = AttributesEnum.Type.index();
    public static final int CODE = AttributesEnum.Code.index();
    public static final int VIDEOS = AttributesEnum.Videos.index();
    public static final int CATEGORY = AttributesEnum.Category.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CoursesEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.adf.research.model.bc.entity.CoursesEO");
    }


    /**
     * Gets the attribute value for CourseId, using the alias name CourseId.
     * @return the value of CourseId
     */
    public Number getCourseId() {
        return (Number) getAttributeInternal(COURSEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CourseId.
     * @param value value to set the CourseId
     */
    public void setCourseId(Number value) {
        setAttributeInternal(COURSEID, value);
    }

    /**
     * Gets the attribute value for CourseName, using the alias name CourseName.
     * @return the value of CourseName
     */
    public String getCourseName() {
        return (String) getAttributeInternal(COURSENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for CourseName.
     * @param value value to set the CourseName
     */
    public void setCourseName(String value) {
        setAttributeInternal(COURSENAME, value);
    }

    /**
     * Gets the attribute value for UserId, using the alias name UserId.
     * @return the value of UserId
     */
    public Number getUserId() {
        return (Number) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserId.
     * @param value value to set the UserId
     */
    public void setUserId(Number value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * Gets the attribute value for CourseDate, using the alias name CourseDate.
     * @return the value of CourseDate
     */
    public Date getCourseDate() {
        return (Date) getAttributeInternal(COURSEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CourseDate.
     * @param value value to set the CourseDate
     */
    public void setCourseDate(Date value) {
        setAttributeInternal(COURSEDATE, value);
    }

    /**
     * Gets the attribute value for CategoryId, using the alias name CategoryId.
     * @return the value of CategoryId
     */
    public Number getCategoryId() {
        return (Number) getAttributeInternal(CATEGORYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CategoryId.
     * @param value value to set the CategoryId
     */
    public void setCategoryId(Number value) {
        setAttributeInternal(CATEGORYID, value);
    }

    /**
     * Gets the attribute value for Type, using the alias name Type.
     * @return the value of Type
     */
    public String getType() {
        return (String) getAttributeInternal(TYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Type.
     * @param value value to set the Type
     */
    public void setType(String value) {
        setAttributeInternal(TYPE, value);
    }

    /**
     * Gets the attribute value for Code, using the alias name Code.
     * @return the value of Code
     */
    public String getCode() {
        return (String) getAttributeInternal(CODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Code.
     * @param value value to set the Code
     */
    public void setCode(String value) {
        setAttributeInternal(CODE, value);
    }

    /**
     * Gets the attribute value for ProfessorName, using the alias name ProfessorName.
     * @return the value of ProfessorName
     */
    public String getProfessorName() {
        return (String) getAttributeInternal(PROFESSORNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProfessorName.
     * @param value value to set the ProfessorName
     */
    public void setProfessorName(String value) {
        setAttributeInternal(PROFESSORNAME, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getVideos() {
        return (RowIterator) getAttributeInternal(VIDEOS);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getCategory() {
        return (EntityImpl) getAttributeInternal(CATEGORY);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setCategory(EntityImpl value) {
        setAttributeInternal(CATEGORY, value);
    }


    /**
     * @param courseId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number courseId) {
        return new Key(new Object[] { courseId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        User user = (User) ADFContext.getCurrent().getSessionScope().get("USERS");
        this.setUserId(user.getUserId());

        SequenceImpl seq = new SequenceImpl("COURSES_SEQ", this.getDBTransaction());
        Number course_id = seq.getSequenceNumber();
        this.setCourseId(course_id);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        /* if (operation == DML_INSERT) {
            SequenceImpl seq = new SequenceImpl("COURSES_SEQ", this.getDBTransaction());
            Number course_id = seq.getSequenceNumber();
            this.setCourseId(course_id);
        } */
        super.doDML(operation, e);
    }
}


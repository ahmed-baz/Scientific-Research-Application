package oracle.adf.research.model.bc.entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Apr 15 00:57:34 EET 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContactDataEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ContactId,
        Mobile,
        Fax,
        PostOfficeCode,
        ProfessrorId,
        Professors;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CONTACTID = AttributesEnum.ContactId.index();
    public static final int MOBILE = AttributesEnum.Mobile.index();
    public static final int FAX = AttributesEnum.Fax.index();
    public static final int POSTOFFICECODE = AttributesEnum.PostOfficeCode.index();
    public static final int PROFESSRORID = AttributesEnum.ProfessrorId.index();
    public static final int PROFESSORS = AttributesEnum.Professors.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ContactDataEOImpl() {
    }

    /**
     * Gets the attribute value for ContactId, using the alias name ContactId.
     * @return the value of ContactId
     */
    public Number getContactId() {
        return (Number) getAttributeInternal(CONTACTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactId.
     * @param value value to set the ContactId
     */
    public void setContactId(Number value) {
        setAttributeInternal(CONTACTID, value);
    }

    /**
     * Gets the attribute value for Mobile, using the alias name Mobile.
     * @return the value of Mobile
     */
    public String getMobile() {
        return (String) getAttributeInternal(MOBILE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Mobile.
     * @param value value to set the Mobile
     */
    public void setMobile(String value) {
        setAttributeInternal(MOBILE, value);
    }

    /**
     * Gets the attribute value for Fax, using the alias name Fax.
     * @return the value of Fax
     */
    public String getFax() {
        return (String) getAttributeInternal(FAX);
    }

    /**
     * Sets <code>value</code> as the attribute value for Fax.
     * @param value value to set the Fax
     */
    public void setFax(String value) {
        setAttributeInternal(FAX, value);
    }

    /**
     * Gets the attribute value for PostOfficeCode, using the alias name PostOfficeCode.
     * @return the value of PostOfficeCode
     */
    public String getPostOfficeCode() {
        return (String) getAttributeInternal(POSTOFFICECODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PostOfficeCode.
     * @param value value to set the PostOfficeCode
     */
    public void setPostOfficeCode(String value) {
        setAttributeInternal(POSTOFFICECODE, value);
    }

    /**
     * Gets the attribute value for ProfessrorId, using the alias name ProfessrorId.
     * @return the value of ProfessrorId
     */
    public Number getProfessrorId() {
        return (Number) getAttributeInternal(PROFESSRORID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProfessrorId.
     * @param value value to set the ProfessrorId
     */
    public void setProfessrorId(Number value) {
        setAttributeInternal(PROFESSRORID, value);
    }

    /**
     * @return the associated entity ProfessorsEOImpl.
     */
    public ProfessorsEOImpl getProfessors() {
        return (ProfessorsEOImpl) getAttributeInternal(PROFESSORS);
    }

    /**
     * Sets <code>value</code> as the associated entity ProfessorsEOImpl.
     */
    public void setProfessors(ProfessorsEOImpl value) {
        setAttributeInternal(PROFESSORS, value);
    }

    /**
     * @param contactId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number contactId) {
        return new Key(new Object[] { contactId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.adf.research.model.bc.entity.ContactDataEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        SequenceImpl seq = new SequenceImpl("CONTACT_DATA_SEQ",this.getDBTransaction());
        Number n = seq.getSequenceNumber();
        this.setContactId(n);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

